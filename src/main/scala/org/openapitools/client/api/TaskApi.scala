/**
 * Docker Engine API The Engine API is an HTTP API served by Docker Engine. It is the API the Docker
 * client uses to communicate with the Engine, so everything the Docker client can do can be done
 * with the API. Most of the client's commands map directly to API endpoints (e.g. `docker ps` is
 * `GET /containers/json`). The notable exception is running containers, which consists of several
 * API calls. # Errors The API uses standard HTTP status codes to indicate the success or failure of
 * the API call. The body of the response will be JSON in the following format: ``` { \"message\":
 * \"page not found\" } ``` # Versioning The API is usually changed in each release, so API calls
 * are versioned to ensure that clients don't break. To lock to a specific version of the API, you
 * prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the
 * `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP
 * `400 Bad Request` error message is returned. If you omit the version-prefix, the current version
 * of the API (v1.43) is used. For example, calling `/info` is the same as calling `/v1.43/info`.
 * Using the API without a version-prefix is deprecated and will be removed in a future release.
 * Engine releases in the near future should support this version of the API, so your client will
 * continue to work even if it is talking to a newer Engine. The API uses an open schema model,
 * which means server may add extra properties to responses. Likewise, the server will ignore any
 * extra query parameters and request body properties. When you write clients, you need to ignore
 * additional properties in responses to ensure they do not break when talking to newer daemons. #
 * Authentication Authentication for registries is handled client side. The client has to send
 * authentication details to various endpoints that need to communicate with registries, such as
 * `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url
 * encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following
 * structure: ``` { \"username\": \"string\", \"password\": \"string\", \"email\": \"string\",
 * \"serveraddress\": \"string\" } ``` The `serveraddress` is a domain/IP without a protocol.
 * Throughout this structure, double quotes are required. If you have already got an identity token
 * from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of
 * credentials: ``` { \"identitytoken\": \"9cbaf023786cd7...\" } ```
 *
 * The version of the OpenAPI document: 1.43
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.ErrorResponse
import java.io.File
import org.openapitools.client.model.Task
import org.openapitools.client.core.JsonSupport.{*, given}
import sttp.client4.*
import sttp.model.Method

object TaskApi:
  def apply(baseUrl: String = "http://localhost/v1.43") = new TaskApi(baseUrl)

end TaskApi

class TaskApi(baseUrl: String):

  /**
   * Expected answers: code 200 : Task (no error) code 404 : ErrorResponse (no such task) code 500 :
   * ErrorResponse (server error) code 503 : ErrorResponse (node is not part of a swarm)
   *
   * @param id
   *   ID of the task
   */
  def taskInspect(id: String): Request[Either[ResponseException[String, Exception], Task]] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/tasks/${id}")
      .contentType("application/json")
      .response(asJson[Task])

  /**
   * Expected answers: code 200 : Seq[Task] (no error) code 500 : ErrorResponse (server error) code
   * 503 : ErrorResponse (node is not part of a swarm)
   *
   * @param filters
   *   A JSON encoded value of the filters (a `map[string][]string`) to process on the tasks list.
   *   Available filters: - `desired-state=(running | shutdown | accepted)` - `id=<task id>` -
   *   `label=key` or `label=\"key=value\"` - `name=<task name>` - `node=<node id or name>` -
   *   `service=<service name>`
   */
  def taskList(filters: Option[String] = None)
      : Request[Either[ResponseException[String, Exception], Seq[Task]]] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/tasks?filters=${filters}")
      .contentType("application/json")
      .response(asJson[Seq[Task]])

  /**
   * Get `stdout` and `stderr` logs from a task. See also
   * [`/containers/{id}/logs`](#operation/ContainerLogs). **Note**: This endpoint works only for
   * services with the `local`, `json-file` or `journald` logging drivers.
   *
   * Expected answers: code 200 : File (logs returned as a stream in response body) code 404 :
   * ErrorResponse (no such task) code 500 : ErrorResponse (server error) code 503 : ErrorResponse
   * (node is not part of a swarm)
   *
   * @param id
   *   ID of the task
   * @param details
   *   Show task context and extra details provided to logs.
   * @param follow
   *   Keep connection after returning logs.
   * @param stdout
   *   Return logs from `stdout`
   * @param stderr
   *   Return logs from `stderr`
   * @param since
   *   Only return logs since this time, as a UNIX timestamp
   * @param timestamps
   *   Add timestamps to every log line
   * @param tail
   *   Only return this number of log lines from the end of the logs. Specify as an integer or `all`
   *   to output all log lines.
   */
  def taskLogs(
      id: String,
      details: Option[Boolean] = None,
      follow: Option[Boolean] = None,
      stdout: Option[Boolean] = None,
      stderr: Option[Boolean] = None,
      since: Option[Int] = None,
      timestamps: Option[Boolean] = None,
      tail: Option[String] = None,
    ): Request[Either[ResponseException[String, Exception], String]] =
    basicRequest
      .method(
        Method.GET,
        uri"$baseUrl/tasks/${id}/logs?details=${details}&follow=${follow}&stdout=${stdout}&stderr=${stderr}&since=${since}&timestamps=${timestamps}&tail=${tail}",
      )
      .contentType("application/json")
      .response(asJson[String])

end TaskApi
