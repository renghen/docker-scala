/**
 * Docker Engine API The Engine API is an HTTP API served by Docker Engine. It is the API the Docker
 * client uses to communicate with the Engine, so everything the Docker client can do can be done
 * with the API. Most of the client's commands map directly to API endpoints (e.g. `docker ps` is
 * `GET /containers/json`). The notable exception is running containers, which consists of several
 * API calls. # Errors The API uses standard HTTP status codes to indicate the success or failure of
 * the API call. The body of the response will be JSON in the following format: ``` { \"message\":
 * \"page not found\" } ``` # Versioning The API is usually changed in each release, so API calls
 * are versioned to ensure that clients don't break. To lock to a specific version of the API, you
 * prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the
 * `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP
 * `400 Bad Request` error message is returned. If you omit the version-prefix, the current version
 * of the API (v1.43) is used. For example, calling `/info` is the same as calling `/v1.43/info`.
 * Using the API without a version-prefix is deprecated and will be removed in a future release.
 * Engine releases in the near future should support this version of the API, so your client will
 * continue to work even if it is talking to a newer Engine. The API uses an open schema model,
 * which means server may add extra properties to responses. Likewise, the server will ignore any
 * extra query parameters and request body properties. When you write clients, you need to ignore
 * additional properties in responses to ensure they do not break when talking to newer daemons. #
 * Authentication Authentication for registries is handled client side. The client has to send
 * authentication details to various endpoints that need to communicate with registries, such as
 * `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url
 * encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following
 * structure: ``` { \"username\": \"string\", \"password\": \"string\", \"email\": \"string\",
 * \"serveraddress\": \"string\" } ``` The `serveraddress` is a domain/IP without a protocol.
 * Throughout this structure, double quotes are required. If you have already got an identity token
 * from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of
 * credentials: ``` { \"identitytoken\": \"9cbaf023786cd7...\" } ```
 *
 * The version of the OpenAPI document: 1.43
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.ErrorResponse
import org.openapitools.client.model.ExecConfig
import org.openapitools.client.model.ExecInspectResponse
import org.openapitools.client.model.ExecStartConfig
import org.openapitools.client.model.IdResponse
import org.openapitools.client.core.JsonSupport.{*, given}
import sttp.client4.*
import sttp.model.Method

object ExecApi:
  def apply(baseUrl: String = "http://localhost/v1.43") = new ExecApi(baseUrl)

end ExecApi

class ExecApi(baseUrl: String):

  /**
   * Run a command inside a running container.
   *
   * Expected answers: code 201 : IdResponse (no error) code 404 : ErrorResponse (no such container)
   * code 409 : ErrorResponse (container is paused) code 500 : ErrorResponse (Server error)
   *
   * @param id
   *   ID or name of container
   * @param execConfig
   *   Exec configuration
   */
  def containerExec(id: String, execConfig: ExecConfig)
      : Request[Either[ResponseException[String, Exception], IdResponse]] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/containers/${id}/exec")
      .contentType("application/json")
      .body(execConfig)
      .response(asJson[IdResponse])

  /**
   * Return low-level information about an exec instance.
   *
   * Expected answers: code 200 : ExecInspectResponse (No error) code 404 : ErrorResponse (No such
   * exec instance) code 500 : ErrorResponse (Server error)
   *
   * @param id
   *   Exec instance ID
   */
  def execInspect(id: String)
      : Request[Either[ResponseException[String, Exception], ExecInspectResponse]] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/exec/${id}/json")
      .contentType("application/json")
      .response(asJson[ExecInspectResponse])

  /**
   * Resize the TTY session used by an exec instance. This endpoint only works if `tty` was
   * specified as part of creating and starting the exec instance.
   *
   * Expected answers: code 200 : (No error) code 400 : ErrorResponse (bad parameter) code 404 :
   * ErrorResponse (No such exec instance) code 500 : ErrorResponse (Server error)
   *
   * @param id
   *   Exec instance ID
   * @param `h`
   *   Height of the TTY session in characters
   * @param `w`
   *   Width of the TTY session in characters
   */
  def execResize(
      id: String,
      `h`: Option[Int] = None,
      `w`: Option[Int] = None,
    ): Request[Either[ResponseException[String, Exception], Unit]] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/exec/${id}/resize?h=${`h`}&w=${`w`}")
      .contentType("application/json")
      .response(asString.mapWithMetadata(ResponseAs.deserializeRightWithError(_ => Right(()))))

  /**
   * Starts a previously set up exec instance. If detach is true, this endpoint returns immediately
   * after starting the command. Otherwise, it sets up an interactive session with the command.
   *
   * Expected answers: code 200 : (No error) code 404 : ErrorResponse (No such exec instance) code
   * 409 : ErrorResponse (Container is stopped or paused)
   *
   * @param id
   *   Exec instance ID
   * @param execStartConfig
   */
  def execStart(id: String, execStartConfig: Option[ExecStartConfig] = None)
      : Request[Either[ResponseException[String, Exception], Unit]] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/exec/${id}/start")
      .contentType("application/json")
      .body(execStartConfig)
      .response(asString.mapWithMetadata(ResponseAs.deserializeRightWithError(_ => Right(()))))

end ExecApi
