/**
 * Docker Engine API The Engine API is an HTTP API served by Docker Engine. It is the API the Docker
 * client uses to communicate with the Engine, so everything the Docker client can do can be done
 * with the API. Most of the client's commands map directly to API endpoints (e.g. `docker ps` is
 * `GET /containers/json`). The notable exception is running containers, which consists of several
 * API calls. # Errors The API uses standard HTTP status codes to indicate the success or failure of
 * the API call. The body of the response will be JSON in the following format: ``` { \"message\":
 * \"page not found\" } ``` # Versioning The API is usually changed in each release, so API calls
 * are versioned to ensure that clients don't break. To lock to a specific version of the API, you
 * prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the
 * `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP
 * `400 Bad Request` error message is returned. If you omit the version-prefix, the current version
 * of the API (v1.43) is used. For example, calling `/info` is the same as calling `/v1.43/info`.
 * Using the API without a version-prefix is deprecated and will be removed in a future release.
 * Engine releases in the near future should support this version of the API, so your client will
 * continue to work even if it is talking to a newer Engine. The API uses an open schema model,
 * which means server may add extra properties to responses. Likewise, the server will ignore any
 * extra query parameters and request body properties. When you write clients, you need to ignore
 * additional properties in responses to ensure they do not break when talking to newer daemons. #
 * Authentication Authentication for registries is handled client side. The client has to send
 * authentication details to various endpoints that need to communicate with registries, such as
 * `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url
 * encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following
 * structure: ``` { \"username\": \"string\", \"password\": \"string\", \"email\": \"string\",
 * \"serveraddress\": \"string\" } ``` The `serveraddress` is a domain/IP without a protocol.
 * Throughout this structure, double quotes are required. If you have already got an identity token
 * from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of
 * credentials: ``` { \"identitytoken\": \"9cbaf023786cd7...\" } ```
 *
 * The version of the OpenAPI document: 1.43
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.ErrorResponse
import org.openapitools.client.model.Node
import org.openapitools.client.model.NodeSpec
import org.openapitools.client.core.JsonSupport.{*, given}
import sttp.client4.*
import sttp.model.Method

object NodeApi:
  def apply(baseUrl: String = "http://localhost/v1.43") = new NodeApi(baseUrl)

end NodeApi

class NodeApi(baseUrl: String):

  /**
   * Expected answers: code 200 : (no error) code 404 : ErrorResponse (no such node) code 500 :
   * ErrorResponse (server error) code 503 : ErrorResponse (node is not part of a swarm)
   *
   * @param id
   *   The ID or name of the node
   * @param force
   *   Force remove a node from the swarm
   */
  def nodeDelete(id: String, force: Option[Boolean] = None)
      : Request[Either[ResponseException[String, Exception], Unit]] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/nodes/${id}?force=${force}")
      .contentType("application/json")
      .response(asString.mapWithMetadata(ResponseAs.deserializeRightWithError(_ => Right(()))))

  /**
   * Expected answers: code 200 : Node (no error) code 404 : ErrorResponse (no such node) code 500 :
   * ErrorResponse (server error) code 503 : ErrorResponse (node is not part of a swarm)
   *
   * @param id
   *   The ID or name of the node
   */
  def nodeInspect(id: String): Request[Either[ResponseException[String, Exception], Node]] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/nodes/${id}")
      .contentType("application/json")
      .response(asJson[Node])

  /**
   * Expected answers: code 200 : Seq[Node] (no error) code 500 : ErrorResponse (server error) code
   * 503 : ErrorResponse (node is not part of a swarm)
   *
   * @param filters
   *   Filters to process on the nodes list, encoded as JSON (a `map[string][]string`). Available
   *   filters: - `id=<node id>` - `label=<engine label>` - `membership=`(`accepted`|`pending`)` -
   *   `name=<node name>` - `node.label=<node label>` - `role=`(`manager`|`worker`)`
   */
  def nodeList(filters: Option[String] = None)
      : Request[Either[ResponseException[String, Exception], Seq[Node]]] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/nodes?filters=${filters}")
      .contentType("application/json")
      .response(asJson[Seq[Node]])

  /**
   * Expected answers: code 200 : (no error) code 400 : ErrorResponse (bad parameter) code 404 :
   * ErrorResponse (no such node) code 500 : ErrorResponse (server error) code 503 : ErrorResponse
   * (node is not part of a swarm)
   *
   * @param id
   *   The ID of the node
   * @param version
   *   The version number of the node object being updated. This is required to avoid conflicting
   *   writes.
   * @param body
   */
  def nodeUpdate(
      id: String,
      version: Long,
      body: Option[NodeSpec] = None,
    ): Request[Either[ResponseException[String, Exception], Unit]] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/nodes/${id}/update?version=${version}")
      .contentType("application/json")
      .body(body)
      .response(asString.mapWithMetadata(ResponseAs.deserializeRightWithError(_ => Right(()))))

end NodeApi
